# -*- coding: utf-8 -*-
"""Sentiment Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pM9jLZg7zaxc41uxJvdZvDYAwV33Qp9g
"""

import pandas as pd
import nltk
tweets=pd.read_csv('/Tweets.csv')
tweets.head()

tweets.shape

"""**Data Preprocessing:**"""

tweets_df=tweets.drop(tweets[tweets['airline_sentiment_confidence']<0.5].index,axis=0)
tweets_df.shape

X=tweets_df['text']
y=tweets_df['airline_sentiment']

"""**Clean your text data:**"""

from nltk.corpus import stopwords
nltk.download('stopwords')
import string
from nltk.stem import PorterStemmer

stop_words=stopwords.words('english')
punct=string.punctuation
stemmer=PorterStemmer()

import re
cleaned_data=[]
for i in range(len(X)):
  tweet=re.sub('[^a-zA-Z]',' ',X.iloc[i])
  tweet=tweet.lower().split()
  tweet=[stemmer.stem(word) for word in tweet if (word not in stop_words) and (word not in punct)]
  tweet=' '.join(tweet)
  cleaned_data.append(tweet)

"""**Printing cleaned data:**"""

cleaned_data

"""**In this, virginamerica and unit are probably the names of the airline companies for which the tweets are made. We’ll also remove them later, as they do not play a role in the sentiment of the tweet.**

Now, we convert it into numbers using something called as the ‘Bag of Words’ approach. We convert it into numbers using something called as the ‘Bag of Words’ approach.
"""

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=3000,stop_words=['virginamerica','unit'])
X_fin=cv.fit_transform(cleaned_data).toarray()

"""**Input is ready, now let's print the output column y:**"""

y

"""**Now, we are going to replace the sentiments ‘negative, neutral, positive' into ‘0,1,2’ using the following lines:**"""

sentiment_ordering = ['negative', 'neutral', 'positive']
y = y.apply(lambda x: sentiment_ordering.index(x))

y.head()

"""**We just have to do the last step now, which is to actually build the NLP model using the input and the output. We will use the Multinomial Naive Bayes model to figure out the relationship between the input and the output which is a supervised learning algorithm that works really well for text based data.**

**We call the function from the sklearn library first:**
"""

from sklearn.naive_bayes import MultinomialNB
model=MultinomialNB()

"""**Now to build the model we split the dataset into a training and testing section(testing size=30% of the actual data):**"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X_fin,y,test_size=0.3)
model.fit(X_train,y_train)

"""**To check how good our model is we first make predictions on the test set, and then print its classification report:**"""

y_pred=model.predict(X_test)
from sklearn.metrics import classification_report
cf=classification_report(y_test,y_pred)
print(cf)